import React from "react";
import {
  Navbar,
  MobileNav,
  Typography,
  Button,
  Menu,
  MenuHandler,
  MenuList,
  MenuItem,
  Avatar,
  Card,
  IconButton,
} from "@material-tailwind/react";
import {
  CubeTransparentIcon,
  UserCircleIcon,
  CodeBracketSquareIcon,
  Square3Stack3DIcon,
  ChevronDownIcon,
  InboxArrowDownIcon,
  LifebuoyIcon,
  PowerIcon,
  RocketLaunchIcon,
  Bars2Icon,
} from "@heroicons/react/24/outline";
import useAuth from '../context/useAuth';
import { isExpired, decodeToken } from 'react-jwt';
import Cookies from 'js-cookie';
//import logo from '../assets/img/logo3.png';
import history from '../history';
import { Link } from 'react-router-dom';

const profileMenuItems = [
  {
    label: "Meu perfil",
    icon: UserCircleIcon,
    path: '/perfil',
  },
  {
    label: "Inbox",
    icon: InboxArrowDownIcon,
    path: '/about'
  },
  {
    label: "Administração",
    icon: LifebuoyIcon,
    path: '/admin',
  },
  {
    label: "Logout",
    icon: PowerIcon,
    path: '/logout',
  },
];

class ProfileMenu extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isMenuOpen: false,
      id:'',
      tipo_user:'',
      usuario:'',
      nome:'',
      setor_user:'',
      imgPerfil:'',
    };
  }

  componentDidMount(){
    const imgPerfilPadrao = "https://cdn-icons-png.flaticon.com/512/3106/3106921.png";
    const token = Cookies.get('token');
    const myDecodedToken = decodeToken(token);
    const isMyTokenExpired = isExpired(token);
    if(isMyTokenExpired){
        useAuth.handleLogout();
    }else if(!isMyTokenExpired){
        this.setState({id: myDecodedToken.user.id});
        this.setState({tipo_user: myDecodedToken.user.tipo_user});
        this.setState({usuario: myDecodedToken.user.usuario});
        this.setState({nome: myDecodedToken.user.nome});
        this.setState({setor_user: myDecodedToken.user.setor_user});
        if(myDecodedToken.user.img_perfil != null){
            this.setState({imgPerfil: myDecodedToken.user.img_perfil})
        }else{
            this.setState({imgPerfil: imgPerfilPadrao})
        }
    }
}

logout = () => {
    useAuth.handleLogout();
    history.push("/");
}

  closeMenu = () => {
    this.setState({ isMenuOpen: false });
  };

  render() {
    const { isMenuOpen } = this.state;
    console.log(this.state)
    return (
      <Menu open={isMenuOpen} handler={(open) => this.setState({ isMenuOpen: open })} placement="bottom-end">
        <MenuHandler>
        <Button
          variant="text"
          color="blue-gray"
          className="flex items-center gap-1 rounded-full py-0.5 pr-2 pl-0.5 lg:ml-auto"
        >
          <Avatar
            variant="circular"
            size="sm"
            alt="tania andrew"
            className="border border-blue-500 p-0.5"
            src={this.state.imgPerfil}
          />
          <ChevronDownIcon
            strokeWidth={2.5}
            className={`h-3 w-3 transition-transform ${
              isMenuOpen ? "rotate-180" : ""
            }`}
          />
        </Button>
      </MenuHandler>
      <MenuList className="p-1">
        {profileMenuItems.map(({ label, icon, path }, key) => {
          const isLastItem = key === profileMenuItems.length - 1;
          if (label === "Administração" && this.state.tipo_user !== 1) {
            // Não renderiza o item "Administração" se o tipo_user não for igual a 1
            return null;
          }
          return (
            <MenuItem
              key={label}
              onClick={this.closeMenu}
              className={`flex items-center gap-2 rounded ${
                isLastItem
                  ? "hover:bg-red-500/10 focus:bg-red-500/10 active:bg-red-500/10"
                  : ""
              }`}
            >
              {React.createElement(icon, {
                className: `h-4 w-4 ${isLastItem ? "text-red-500" : ""}`,
                strokeWidth: 2,
              })}
              <Typography
                as={Link}
                to={path}
                variant="small"
                className="font-normal"
                color={label === 'Logout' ? "red" : "inherit"}
              >
                {label}
              </Typography>
            </MenuItem>
          );
        })}
      </MenuList>
      </Menu>
    );
  }
}

const navListMenuItems = [
  {
    title: "@material-tailwind/html",
    description:
      "Learn how to use @material-tailwind/html, packed with rich components and widgets.",
  },
  {
    title: "@material-tailwind/react",
    description:
      "Learn how to use @material-tailwind/react, packed with rich components for React.",
  },
  {
    title: "Material Tailwind PRO",
    description:
      "A complete set of UI Elements for building faster websites in less time.",
  },
];

class NavListMenu extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isMenuOpen: false,
    };
  }

  renderItems = () => {
    const renderItems = navListMenuItems.map(({ title, description }) => (
    // eslint-disable-next-line jsx-a11y/anchor-is-valid
    <a href="#" key={title}>
      <MenuItem>
        <Typography variant="h6" color="blue-gray" className="mb-1">
          {title}
        </Typography>
        <Typography variant="small" color="gray" className="font-normal">
          {description}
        </Typography>
      </MenuItem>
    </a>
  ))};

  render() {
    const { isMenuOpen } = this.state;
    return (
      <React.Fragment>
      <Menu allowHover open={isMenuOpen} handler={this.setIsMenuOpen}>
        <MenuHandler>
          <Typography as="a" href="#" variant="small" className="font-normal">
            <MenuItem className="hidden items-center gap-2 text-blue-gray-900 lg:flex lg:rounded-full">
              <Square3Stack3DIcon className="h-[18px] w-[18px]" /> Pages{" "}
              <ChevronDownIcon
                strokeWidth={2}
                className={`h-3 w-3 transition-transform ${
                  isMenuOpen ? "rotate-180" : ""
                }`}
              />
            </MenuItem>
          </Typography>
        </MenuHandler>
        <MenuList className="hidden w-[36rem] grid-cols-7 gap-3 overflow-visible lg:grid">
          <Card
            color="blue"
            shadow={false}
            variant="gradient"
            className="col-span-3 grid h-full w-full place-items-center rounded-md"
          >
            <RocketLaunchIcon strokeWidth={1} className="h-28 w-28" />
          </Card>
          <ul className="col-span-4 flex w-full flex-col gap-1">
            {this.renderItems}
          </ul>
        </MenuList>
      </Menu>
      <MenuItem className="flex items-center gap-2 text-blue-gray-900 lg:hidden">
        <Square3Stack3DIcon className="h-[18px] w-[18px]" /> Pages{" "}
      </MenuItem>
      <ul className="ml-6 flex w-full flex-col gap-1 lg:hidden">
        {this.renderItems}
      </ul>
    </React.Fragment>
    );
  }
}

const navListItems = [
  {
    label: "Account",
    icon: UserCircleIcon,
  },
  {
    label: "Blocks",
    icon: CubeTransparentIcon,
  },
  {
    label: "Docs",
    icon: CodeBracketSquareIcon,
  },
];

class NavList extends React.Component {
  render() {
    return (
      <ul className="mb-4 mt-2 flex flex-col gap-2 lg:mb-0 lg:mt-0 lg:flex-row lg:items-center">
      <NavListMenu />
      {navListItems.map(({ label, icon }, key) => (
        <Typography
          key={label}
          as="a"
          href="#"
          variant="small"
          color="blue-gray"
          className="font-normal"
        >
          <MenuItem className="flex items-center gap-2 lg:rounded-full">
            {React.createElement(icon, { className: "h-[18px] w-[18px]" })}{" "}
            {label}
          </MenuItem>
        </Typography>
      ))}
    </ul>
    );
  }
}

class ComplexNavbar extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isNavOpen: false,
    };
  }

  toggleIsNavOpen = () => {
    this.setState((prevState) => ({ isNavOpen: !prevState.isNavOpen }));
  };

  componentDidMount() {
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 960) {
        this.setState({ isNavOpen: false });
      }
    });
  }

  render() {
    const { isNavOpen } = this.state;
    return (
      <Navbar className="mx-auto max-w-screen-xl p-2 lg:rounded-full lg:pl-6">
        <div className="relative mx-auto flex items-center text-blue-gray-900">
        <Typography
          as="a"
          href="#"
          className="mr-4 ml-2 cursor-pointer py-1.5 font-medium"
        >
          WorkSpots
        </Typography>
        <div className="absolute top-2/4 left-2/4 hidden -translate-x-2/4 -translate-y-2/4 lg:block">
          <NavList />
        </div>
        <IconButton
          size="sm"
          color="blue-gray"
          variant="text"
          onClick={this.toggleIsNavOpen}
          className="ml-auto mr-2 lg:hidden"
        >
          <Bars2Icon className="h-6 w-6" />
        </IconButton>
        <ProfileMenu />
      </div>
      <MobileNav open={isNavOpen} className="overflow-scroll">
        <NavList />
      </MobileNav>
      </Navbar>
    );
  }
}

export default ComplexNavbar;
